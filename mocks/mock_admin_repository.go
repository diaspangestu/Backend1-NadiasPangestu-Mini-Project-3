// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/repositories (interfaces: AdminRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepositoryInterface is a mock of AdminRepositoryInterface interface.
type MockAdminRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryInterfaceMockRecorder
}

// MockAdminRepositoryInterfaceMockRecorder is the mock recorder for MockAdminRepositoryInterface.
type MockAdminRepositoryInterfaceMockRecorder struct {
	mock *MockAdminRepositoryInterface
}

// NewMockAdminRepositoryInterface creates a new mock instance.
func NewMockAdminRepositoryInterface(ctrl *gomock.Controller) *MockAdminRepositoryInterface {
	mock := &MockAdminRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepositoryInterface) EXPECT() *MockAdminRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockAdminRepositoryInterface) CreateCustomer(arg0 *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockAdminRepositoryInterfaceMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).CreateCustomer), arg0)
}

// DeleteAdminById mocks base method.
func (m *MockAdminRepositoryInterface) DeleteAdminById(arg0 uint, arg1 *entities.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminById indicates an expected call of DeleteAdminById.
func (mr *MockAdminRepositoryInterfaceMockRecorder) DeleteAdminById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminById", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).DeleteAdminById), arg0, arg1)
}

// DeleteCustomerById mocks base method.
func (m *MockAdminRepositoryInterface) DeleteCustomerById(arg0 uint, arg1 *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById.
func (mr *MockAdminRepositoryInterfaceMockRecorder) DeleteCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).DeleteCustomerById), arg0, arg1)
}

// GetAdminById mocks base method.
func (m *MockAdminRepositoryInterface) GetAdminById(arg0 uint) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminById", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminById indicates an expected call of GetAdminById.
func (mr *MockAdminRepositoryInterfaceMockRecorder) GetAdminById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminById", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).GetAdminById), arg0)
}

// GetAllCustomers mocks base method.
func (m *MockAdminRepositoryInterface) GetAllCustomers(arg0, arg1, arg2 string, arg3, arg4 int) ([]*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockAdminRepositoryInterfaceMockRecorder) GetAllCustomers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).GetAllCustomers), arg0, arg1, arg2, arg3, arg4)
}

// GetCustomerByEmail mocks base method.
func (m *MockAdminRepositoryInterface) GetCustomerByEmail(arg0 string) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockAdminRepositoryInterfaceMockRecorder) GetCustomerByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).GetCustomerByEmail), arg0)
}

// GetCustomerById mocks base method.
func (m *MockAdminRepositoryInterface) GetCustomerById(arg0 uint) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockAdminRepositoryInterfaceMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).GetCustomerById), arg0)
}

// LoginAdmin mocks base method.
func (m *MockAdminRepositoryInterface) LoginAdmin(arg0 string) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockAdminRepositoryInterfaceMockRecorder) LoginAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).LoginAdmin), arg0)
}

// RegisterAdmin mocks base method.
func (m *MockAdminRepositoryInterface) RegisterAdmin(arg0 *entities.Actor) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAdmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAdmin indicates an expected call of RegisterAdmin.
func (mr *MockAdminRepositoryInterfaceMockRecorder) RegisterAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdmin", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).RegisterAdmin), arg0)
}

// SaveCustomersFromAPI mocks base method.
func (m *MockAdminRepositoryInterface) SaveCustomersFromAPI(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCustomersFromAPI", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCustomersFromAPI indicates an expected call of SaveCustomersFromAPI.
func (mr *MockAdminRepositoryInterfaceMockRecorder) SaveCustomersFromAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCustomersFromAPI", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).SaveCustomersFromAPI), arg0)
}

// UpdateAdminById mocks base method.
func (m *MockAdminRepositoryInterface) UpdateAdminById(arg0 uint, arg1 *entities.Actor) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminById", arg0, arg1)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminById indicates an expected call of UpdateAdminById.
func (mr *MockAdminRepositoryInterfaceMockRecorder) UpdateAdminById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminById", reflect.TypeOf((*MockAdminRepositoryInterface)(nil).UpdateAdminById), arg0, arg1)
}
