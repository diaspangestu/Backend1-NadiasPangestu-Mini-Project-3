// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/repositories (interfaces: CustomerRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepositoryInterface is a mock of CustomerRepositoryInterface interface.
type MockCustomerRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryInterfaceMockRecorder
}

// MockCustomerRepositoryInterfaceMockRecorder is the mock recorder for MockCustomerRepositoryInterface.
type MockCustomerRepositoryInterfaceMockRecorder struct {
	mock *MockCustomerRepositoryInterface
}

// NewMockCustomerRepositoryInterface creates a new mock instance.
func NewMockCustomerRepositoryInterface(ctrl *gomock.Controller) *MockCustomerRepositoryInterface {
	mock := &MockCustomerRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepositoryInterface) EXPECT() *MockCustomerRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepositoryInterface) CreateCustomer(arg0 *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).CreateCustomer), arg0)
}

// DeleteCustomerById mocks base method.
func (m *MockCustomerRepositoryInterface) DeleteCustomerById(arg0 uint, arg1 *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) DeleteCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).DeleteCustomerById), arg0, arg1)
}

// GetCustomerById mocks base method.
func (m *MockCustomerRepositoryInterface) GetCustomerById(arg0 uint) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).GetCustomerById), arg0)
}

// UpdateCustomerById mocks base method.
func (m *MockCustomerRepositoryInterface) UpdateCustomerById(arg0 uint, arg1 *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerById", arg0, arg1)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerById indicates an expected call of UpdateCustomerById.
func (mr *MockCustomerRepositoryInterfaceMockRecorder) UpdateCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerById", reflect.TypeOf((*MockCustomerRepositoryInterface)(nil).UpdateCustomerById), arg0, arg1)
}
