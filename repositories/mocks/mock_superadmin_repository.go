// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/repositories (interfaces: SuperAdminRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/diaspangestu/Backend1-NadiasPangestu-Mini-Project-2/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockSuperAdminRepository is a mock of SuperAdminRepository interface.
type MockSuperAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSuperAdminRepositoryMockRecorder
}

func (m *MockSuperAdminRepository) UpdateCustomerById(id uint, customer *entities.Customer) (*entities.Customer, error) {
	//TODO implement me
	panic("implement me")
}

// MockSuperAdminRepositoryMockRecorder is the mock recorder for MockSuperAdminRepository.
type MockSuperAdminRepositoryMockRecorder struct {
	mock *MockSuperAdminRepository
}

// NewMockSuperAdminRepository creates a new mock instance.
func NewMockSuperAdminRepository(ctrl *gomock.Controller) *MockSuperAdminRepository {
	mock := &MockSuperAdminRepository{ctrl: ctrl}
	mock.recorder = &MockSuperAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuperAdminRepository) EXPECT() *MockSuperAdminRepositoryMockRecorder {
	return m.recorder
}

// ApprovedAdminRegister mocks base method.
func (m *MockSuperAdminRepository) ApprovedAdminRegister(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovedAdminRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApprovedAdminRegister indicates an expected call of ApprovedAdminRegister.
func (mr *MockSuperAdminRepositoryMockRecorder) ApprovedAdminRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovedAdminRegister", reflect.TypeOf((*MockSuperAdminRepository)(nil).ApprovedAdminRegister), arg0)
}

// CreateCustomer mocks base method.
func (m *MockSuperAdminRepository) CreateCustomer(arg0 *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockSuperAdminRepositoryMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockSuperAdminRepository)(nil).CreateCustomer), arg0)
}

// CreateSuperadmin mocks base method.
func (m *MockSuperAdminRepository) CreateSuperadmin(arg0 *entities.Actor) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSuperadmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSuperadmin indicates an expected call of CreateSuperadmin.
func (mr *MockSuperAdminRepositoryMockRecorder) CreateSuperadmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuperadmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).CreateSuperadmin), arg0)
}

// DeleteCustomerById mocks base method.
func (m *MockSuperAdminRepository) DeleteCustomerById(arg0 uint, arg1 *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById.
func (mr *MockSuperAdminRepositoryMockRecorder) DeleteCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockSuperAdminRepository)(nil).DeleteCustomerById), arg0, arg1)
}

// GetAllAdmins mocks base method.
func (m *MockSuperAdminRepository) GetAllAdmins(arg0 string, arg1, arg2 int) ([]*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockSuperAdminRepositoryMockRecorder) GetAllAdmins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetAllAdmins), arg0, arg1, arg2)
}

// GetAllCustomers mocks base method.
func (m *MockSuperAdminRepository) GetAllCustomers(arg0, arg1, arg2 string, arg3, arg4 int) ([]*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockSuperAdminRepositoryMockRecorder) GetAllCustomers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetAllCustomers), arg0, arg1, arg2, arg3, arg4)
}

// GetApprovalRequest mocks base method.
func (m *MockSuperAdminRepository) GetApprovalRequest() ([]*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovalRequest")
	ret0, _ := ret[0].([]*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovalRequest indicates an expected call of GetApprovalRequest.
func (mr *MockSuperAdminRepositoryMockRecorder) GetApprovalRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalRequest", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetApprovalRequest))
}

// GetCustomerById mocks base method.
func (m *MockSuperAdminRepository) GetCustomerById(arg0 uint) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockSuperAdminRepositoryMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetCustomerById), arg0)
}

// LoginSuperadmin mocks base method.
func (m *MockSuperAdminRepository) LoginSuperadmin(arg0 string) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginSuperadmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginSuperadmin indicates an expected call of LoginSuperadmin.
func (mr *MockSuperAdminRepositoryMockRecorder) LoginSuperadmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginSuperadmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).LoginSuperadmin), arg0)
}

// RejectedAdminRegister mocks base method.
func (m *MockSuperAdminRepository) RejectedAdminRegister(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectedAdminRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectedAdminRegister indicates an expected call of RejectedAdminRegister.
func (mr *MockSuperAdminRepositoryMockRecorder) RejectedAdminRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectedAdminRegister", reflect.TypeOf((*MockSuperAdminRepository)(nil).RejectedAdminRegister), arg0)
}

// UpdateActivedAdmin mocks base method.
func (m *MockSuperAdminRepository) UpdateActivedAdmin(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivedAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivedAdmin indicates an expected call of UpdateActivedAdmin.
func (mr *MockSuperAdminRepositoryMockRecorder) UpdateActivedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivedAdmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).UpdateActivedAdmin), arg0)
}

// UpdateDeadactivedAdmin mocks base method.
func (m *MockSuperAdminRepository) UpdateDeadactivedAdmin(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeadactivedAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeadactivedAdmin indicates an expected call of UpdateDeadactivedAdmin.
func (mr *MockSuperAdminRepositoryMockRecorder) UpdateDeadactivedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeadactivedAdmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).UpdateDeadactivedAdmin), arg0)
}
